{
  "api/DontPanic.TumblrSharp.ApiMethod.html": {
    "href": "api/DontPanic.TumblrSharp.ApiMethod.html",
    "title": "Class ApiMethod | NewTumblrSharp",
    "summary": "Class ApiMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Encapsulates all the data required to make a Tumblr API call. public class ApiMethod Inheritance object ApiMethod Derived BlogMethod UserMethod Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApiMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the ApiMethod class. public ApiMethod(string methodUrl, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters methodUrl string The url of the method to call. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only GET and POST are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException methodUrl is null. ArgumentException methodUrl is empty. httpMethod is not Get or Post. Properties HttpMethod Gets the required HttpMethod for the Tumblr API call. public HttpMethod HttpMethod { get; } Property Value HttpMethod OAuthToken Gets the OAuth Token to use for the call. public Token OAuthToken { get; } Property Value Token Parameters Gets the parameters for the Tumblr API call. public MethodParameterSet Parameters { get; } Property Value MethodParameterSet Url Gets the url of the Tumblr API method to call. public string Url { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.AvatarShape.html": {
    "href": "api/DontPanic.TumblrSharp.AvatarShape.html",
    "title": "Enum AvatarShape | NewTumblrSharp",
    "summary": "Enum AvatarShape Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Options for what shape a user's avatar is intended to display as [JsonConverter(typeof(StringEnumConverter))] public enum AvatarShape Fields [EnumMember(Value = \"avatar-circle\")] AvatarCircle = 4 circle avatar [EnumMember(Value = \"avatar-rounded\")] AvatarRounded = 6 rounded avatar [EnumMember(Value = \"avatar-square\")] AvatarSquare = 5 square avatar [EnumMember(Value = \"circle\")] Circle = 2 Circular avatar [EnumMember(Value = \"\")] None = 0 Empty avatar shape [EnumMember(Value = \"rounded\")] Rounded = 3 rounded avatar [EnumMember(Value = \"square\")] Square = 1 Square avatar"
  },
  "api/DontPanic.TumblrSharp.BinaryFile.html": {
    "href": "api/DontPanic.TumblrSharp.BinaryFile.html",
    "title": "Class BinaryFile | NewTumblrSharp",
    "summary": "Class BinaryFile Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a binary file (photo, video or audio). public class BinaryFile Inheritance object BinaryFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BinaryFile(byte[], string, string) Initializes a new instance of the BinaryFile class. public BinaryFile(byte[] data, string fileName = null, string mimeType = null) Parameters data byte[] The binary file content. fileName string The file name. mimeType string The file's mime type. BinaryFile(Stream, string, string) Initializes a new instance of the BinaryFile class. public BinaryFile(Stream stream, string fileName = null, string mimeType = null) Parameters stream Stream The binary file content. fileName string The file name. mimeType string The file's mime type. Properties Data Gets the binary file content. public byte[] Data { get; } Property Value byte[] FileName Gets the file name. public string FileName { get; } Property Value string MimeType Gets the file's mime type. public string MimeType { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.BlogMethod.html": {
    "href": "api/DontPanic.TumblrSharp.BlogMethod.html",
    "title": "Class BlogMethod | NewTumblrSharp",
    "summary": "Class BlogMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a blog API method. public class BlogMethod : ApiMethod Inheritance object ApiMethod BlogMethod Inherited Members ApiMethod.Url ApiMethod.OAuthToken ApiMethod.HttpMethod ApiMethod.Parameters object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BlogMethod(string, string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the BlogMethod class. public BlogMethod(string blogName, string methodName, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters blogName string The name of the blog target of the method call. Can be passed with or without the trailing \".tumblr.com\". methodName string The name of the method to call. The method url will be automatically built using this information together with the blogName. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only Get and Post are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException blogName is null. methodName is null. ArgumentException blogName is empty. methodName is empty."
  },
  "api/DontPanic.TumblrSharp.BlogType.html": {
    "href": "api/DontPanic.TumblrSharp.BlogType.html",
    "title": "Enum BlogType | NewTumblrSharp",
    "summary": "Enum BlogType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the type of a blog. public enum BlogType Fields Private = 1 Private. Public = 0 Public."
  },
  "api/DontPanic.TumblrSharp.Client.AnswerPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AnswerPost.html",
    "title": "Class AnswerPost | NewTumblrSharp",
    "summary": "Class AnswerPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an answer post. public class AnswerPost : BasePost Inheritance object BasePost AnswerPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Answer Gets or sets the answer. [JsonProperty(\"answer\")] public string Answer { get; set; } Property Value string AskingName Gets or sets the name of the user asking the question. [JsonProperty(\"asking_name\")] public string AskingName { get; set; } Property Value string AskingUrl Gets or sets the url of the blog of the user asking the question. [JsonProperty(\"asking_url\")] public string AskingUrl { get; set; } Property Value string Question Gets or sets tquestion. [JsonProperty(\"question\")] public string Question { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.AudioPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.AudioPost.html",
    "title": "Class AudioPost | NewTumblrSharp",
    "summary": "Class AudioPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an audio post. public class AudioPost : BasePost Inheritance object BasePost AudioPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Album Gets or sets the audio file's ID3 album value. [JsonProperty(\"album\")] public string Album { get; set; } Property Value string AlbumArt Gets or sets the location of the audio file's ID3 album art image. [JsonProperty(\"album_art\")] public string AlbumArt { get; set; } Property Value string Artist Gets or sets the audio file's ID3 artist value [JsonProperty(\"artist\")] public string Artist { get; set; } Property Value string AudioUrl Gets or sets the url to the audio file. [JsonProperty(\"audio_url\")] public string AudioUrl { get; set; } Property Value string Caption Gets or sets the user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string Player Gets or sets the HTML for embedding the audio player. [JsonProperty(\"player\")] public string Player { get; set; } Property Value string PlaysCount Gets or sets the number of times the audio post has been played. [JsonProperty(\"plays\")] public int PlaysCount { get; set; } Property Value int TrackName Gets or sets the audio file's ID3 title value. [JsonProperty(\"track_name\")] public string TrackName { get; set; } Property Value string TrackNumber Gets or sets the audio file's ID3 track value. [JsonProperty(\"track_number\")] public int TrackNumber { get; set; } Property Value int Year Gets or sets the audio file's ID3 year value. [JsonProperty(\"year\")] public int Year { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.BaseNote.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BaseNote.html",
    "title": "Class BaseNote | NewTumblrSharp",
    "summary": "Class BaseNote Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Base class for post notes. public class BaseNote Inheritance object BaseNote Derived PostAttributionNote Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvatarShape The avatar shape used by the blog that left the note [JsonProperty(PropertyName = \"avatar_shape\")] public AvatarShape AvatarShape { get; set; } Property Value AvatarShape BlogName The short name used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_name\")] public string BlogName { get; set; } Property Value string BlogUrl The base URL of the blog that left the note [JsonProperty(PropertyName = \"blog_url\")] public string BlogUrl { get; set; } Property Value string BlogUuid The full domain used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_uuid\")] public string BlogUuid { get; set; } Property Value string Followed Indicates if the current user is following the blog who left the post [JsonProperty(PropertyName = \"followed\")] public bool Followed { get; set; } Property Value bool PostId The post ID of the reblogged post if the note is a reblog [JsonProperty(PropertyName = \"post_id\")] public string PostId { get; set; } Property Value string ReblogParentBlogName The parent blog of the reblogged post if the note is a reblog [JsonProperty(PropertyName = \"reblog_parent_blog_name\")] public string ReblogParentBlogName { get; set; } Property Value string ReplyText The text of the note if it is a reply [JsonProperty(PropertyName = \"reply_text\")] public string ReplyText { get; set; } Property Value string Timestamp The date and time of the post (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime Type The type of note applied to the post [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public NoteType Type { get; set; } Property Value NoteType Methods Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.Client.BasePost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BasePost.html",
    "title": "Class BasePost | NewTumblrSharp",
    "summary": "Class BasePost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Base class for post types. public class BasePost Inheritance object BasePost Derived AnswerPost AudioPost ChatPost LinkPost PhotoPost QuotePost TextPost VideoPost Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlogName The short name used to uniquely identify a blog. [JsonProperty(PropertyName = \"blog_name\")] public string BlogName { get; set; } Property Value string Format The PostFormat. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"format\")] public PostFormat Format { get; set; } Property Value PostFormat Id The post identifier. [JsonProperty(PropertyName = \"id\")] public long Id { get; set; } Property Value long IsBookmarklet Indicates whether the post was created via the Tumblr bookmarklet. [JsonProperty(PropertyName = \"bookmarklet\", NullValueHandling = NullValueHandling.Ignore)] public string IsBookmarklet { get; set; } Property Value string IsMobile Indicates whether the post was created via mobile/email publishing. [JsonProperty(PropertyName = \"mobile\", NullValueHandling = NullValueHandling.Ignore)] public string IsMobile { get; set; } Property Value string Liked Indicates if the current user has already liked the post or not. [JsonProperty(PropertyName = \"liked\", NullValueHandling = NullValueHandling.Ignore)] public string Liked { get; set; } Property Value string Notes The notes (likes and reblogs) for the post [JsonProperty(PropertyName = \"notes\")] [JsonConverter(typeof(NoteConverter))] public List<BaseNote> Notes { get; set; } Property Value List<BaseNote> NotesCount The number of notes (likes and reblogs) for the post. [JsonProperty(PropertyName = \"note_count\")] public long NotesCount { get; set; } Property Value long NumberOfPostsInResponse The number of posts in the response (can be used for pagination). [JsonProperty(PropertyName = \"total_posts\")] public int NumberOfPostsInResponse { get; set; } Property Value int Reblog Reblog [JsonProperty(PropertyName = \"reblog\", NullValueHandling = NullValueHandling.Ignore)] public Reblog Reblog { get; set; } Property Value Reblog ReblogKey The key to use to reblog the post. [JsonProperty(PropertyName = \"reblog_key\")] public string ReblogKey { get; set; } Property Value string RebloggedFromId The id of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_id\", NullValueHandling = NullValueHandling.Ignore)] public long? RebloggedFromId { get; set; } Property Value long? RebloggedFromName Title of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_name\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromName { get; set; } Property Value string RebloggedFromTitle URL of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_from_title\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromTitle { get; set; } Property Value string RebloggedFromUrl Name of a blog being reblogged. [JsonProperty(PropertyName = \"reblogged_from_url\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedFromUrl { get; set; } Property Value string RebloggedRootId The id of an original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_id\", NullValueHandling = NullValueHandling.Ignore)] public long? RebloggedRootId { get; set; } Property Value long? RebloggedRootName Title of the original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_name\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootName { get; set; } Property Value string RebloggedRootTitle URL of the original post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_title\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootTitle { get; set; } Property Value string RebloggedRootUrl Root name of a post being reblogged. [JsonProperty(PropertyName = \"reblogged_root_url\", NullValueHandling = NullValueHandling.Ignore)] public string RebloggedRootUrl { get; set; } Property Value string ShortUrl Shorturl [JsonProperty(PropertyName = \"short_url\")] public string ShortUrl { get; set; } Property Value string Slug slug [JsonProperty(PropertyName = \"slug\")] public string Slug { get; set; } Property Value string SourceTitle The title of the blog which is the source of the post, if any. [JsonProperty(PropertyName = \"source_title\", NullValueHandling = NullValueHandling.Ignore)] public string SourceTitle { get; set; } Property Value string SourceUrl The url to the blog that is the source of the post, if any. [JsonProperty(PropertyName = \"source_url\", NullValueHandling = NullValueHandling.Ignore)] public string SourceUrl { get; set; } Property Value string State The PostCreationState. [JsonConverter(typeof(StringEnumConverter))] [JsonProperty(PropertyName = \"state\")] public PostCreationState State { get; set; } Property Value PostCreationState Summary Summary [JsonProperty(PropertyName = \"summary\")] public string Summary { get; set; } Property Value string Tags The tags applied to the post. [JsonProperty(PropertyName = \"tags\")] public string[] Tags { get; set; } Property Value string[] Timestamp The date and time of the post (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime Trails Trail [JsonProperty(PropertyName = \"trail\", NullValueHandling = NullValueHandling.Include)] [JsonConverter(typeof(TrailConverter))] public List<Trail> Trails { get; set; } Property Value List<Trail> Type The post type. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public PostType Type { get; set; } Property Value PostType Url The url of the post. [JsonProperty(PropertyName = \"post_url\")] public string Url { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogBase.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogBase.html",
    "title": "Class BlogBase | NewTumblrSharp",
    "summary": "Class BlogBase Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains common properties for a blog. public class BlogBase Inheritance object BlogBase Derived BlogInfo UserBlogInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties LastUpdated The date and time when the blog was last updated (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"updated\")] public DateTime LastUpdated { get; set; } Property Value DateTime Name The short blog name that appears before tumblr.com in a standard blog hostname (and before the domain in a custom blog hostname). [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string Title The display title of the blog. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string Url The blog url. [JsonProperty(PropertyName = \"url\")] public string Url { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.BlogInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BlogInfo.html",
    "title": "Class BlogInfo | NewTumblrSharp",
    "summary": "Class BlogInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog. public class BlogInfo : BlogBase Inheritance object BlogBase BlogInfo Inherited Members BlogBase.Title BlogBase.Name BlogBase.Url BlogBase.LastUpdated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AskPageTitle Title from askpage [JsonProperty(PropertyName = \"ask_page_title\")] public string AskPageTitle { get; set; } Property Value string Description The blog's description. [JsonProperty(PropertyName = \"description\")] public string Description { get; set; } Property Value string IsAdult Blog is marked as adult [JsonProperty(PropertyName = \"is_adult\")] public bool IsAdult { get; set; } Property Value bool IsAnonAskEnabled Indicates whether the blog allows anonymous questions. Returned only if IsAskEnabled is true. [JsonProperty(PropertyName = \"ask_anon\")] public bool IsAnonAskEnabled { get; set; } Property Value bool IsAskEnabled Indicates whether the blog allows questions. [JsonProperty(PropertyName = \"ask\")] public bool IsAskEnabled { get; set; } Property Value bool IsNsfw Whether the blog is marked as NSFW or not. [JsonProperty(PropertyName = \"is_nsfw\")] public bool IsNsfw { get; set; } Property Value bool IsOptoutAds IsOptoutAds [JsonProperty(PropertyName = \"is_optout_ads\")] public bool IsOptoutAds { get; set; } Property Value bool LikesCount Number of likes for this user. Returned only if this is the user's primary blog and sharing of likes is enabled. [JsonProperty(PropertyName = \"likes\")] public long LikesCount { get; set; } Property Value long PostsCount The total number of posts to this blog. [JsonProperty(PropertyName = \"posts\")] public long PostsCount { get; set; } Property Value long ReplyConditions Reply conditions [JsonProperty(PropertyName = \"reply_conditions\")] public long ReplyConditions { get; set; } Property Value long ShareLikes Share likes [JsonProperty(PropertyName = \"share_likes\")] public bool ShareLikes { get; set; } Property Value bool SubmissionPageTitle Title from submissionpage [JsonProperty(PropertyName = \"submission_page_title\")] public string SubmissionPageTitle { get; set; } Property Value string Subscribed Subscribed [JsonProperty(PropertyName = \"subscribed\")] public bool Subscribed { get; set; } Property Value bool"
  },
  "api/DontPanic.TumblrSharp.Client.BoolConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.BoolConverter.html",
    "title": "Class BoolConverter | NewTumblrSharp",
    "summary": "Class BoolConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts \"Y\" and \"N\" to boolean. public class BoolConverter : JsonConverter Inheritance object JsonConverter BoolConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.ChatFragment.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatFragment.html",
    "title": "Class ChatFragment | NewTumblrSharp",
    "summary": "Class ChatFragment Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a fragment of a ChatPost. public class ChatFragment Inheritance object ChatFragment Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Label The label of the speaker. [JsonProperty(PropertyName = \"label\")] public string Label { get; set; } Property Value string Name The name of the speaker. [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string Phrase The text. [JsonProperty(PropertyName = \"phrase\")] public string Phrase { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.ChatPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ChatPost.html",
    "title": "Class ChatPost | NewTumblrSharp",
    "summary": "Class ChatPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a chat post. public class ChatPost : BasePost Inheritance object BasePost ChatPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Body The full chat body. [JsonProperty(PropertyName = \"body\")] public string Body { get; set; } Property Value string Dialogue An array of ChatFragment instances, representing the chat. [JsonProperty(PropertyName = \"dialogue\")] public ChatFragment[] Dialogue { get; set; } Property Value ChatFragment[] Title The optional title of the post. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.DashboardOption.html": {
    "href": "api/DontPanic.TumblrSharp.Client.DashboardOption.html",
    "title": "Enum DashboardOption | NewTumblrSharp",
    "summary": "Enum DashboardOption Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Option for get dashboardpost, before or after a spezifics Id public enum DashboardOption Fields After = 2 after Before = 1 before"
  },
  "api/DontPanic.TumblrSharp.Client.EnumStringConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.EnumStringConverter.html",
    "title": "Class EnumStringConverter | NewTumblrSharp",
    "summary": "Class EnumStringConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Generic converter for enumerations. public class EnumStringConverter : JsonConverter Inheritance object JsonConverter EnumStringConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Exif.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Exif.html",
    "title": "Class Exif | NewTumblrSharp",
    "summary": "Class Exif Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Exif public class Exif Inheritance object Exif Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aperture aperture [JsonProperty(\"aperture\")] public string Aperture { get; set; } Property Value string Camera camera [JsonProperty(\"camera\")] public string Camera { get; set; } Property Value string Exposure exposure [JsonProperty(\"exposure\")] public string Exposure { get; set; } Property Value string FocalLength focallength [JsonProperty(\"focallength\")] public string FocalLength { get; set; } Property Value string ISO iso [JsonProperty(\"iso\")] public int ISO { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.ExtensionService.html": {
    "href": "api/DontPanic.TumblrSharp.Client.ExtensionService.html",
    "title": "Class ExtensionService | NewTumblrSharp",
    "summary": "Class ExtensionService Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll extensionclass for IServiceCollection public static class ExtensionService Inheritance object ExtensionService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseTumblrClient(IServiceCollection) Configure ServiceCollection for HttpClientFactory public static void UseTumblrClient(this IServiceCollection services) Parameters services IServiceCollection services collection to add httpclient for HttpClientFactory to create internal HttpClient"
  },
  "api/DontPanic.TumblrSharp.Client.Followers.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Followers.html",
    "title": "Class Followers | NewTumblrSharp",
    "summary": "Class Followers Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog's followers. public class Followers Inheritance object Followers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count The number of users currently following the blog. [JsonProperty(PropertyName = \"total_users\")] public long Count { get; set; } Property Value long LastUpdated The date and time when the blog was last updated (in local time). [JsonConverter(typeof(TimestampConverter))] [JsonProperty(PropertyName = \"updated\")] public DateTime LastUpdated { get; set; } Property Value DateTime PrimaryBlogUrl The URL of the user's primary blog. [JsonProperty(PropertyName = \"url\")] public string PrimaryBlogUrl { get; set; } Property Value string Result An array of BlogBase instances, representing information about each user following the blog. [JsonProperty(PropertyName = \"users\")] public BlogBase[] Result { get; set; } Property Value BlogBase[] UserName The user's name on tumblr. [JsonProperty(PropertyName = \"name\")] public string UserName { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Following.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Following.html",
    "title": "Class Following | NewTumblrSharp",
    "summary": "Class Following Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains the blogs that a user is following. public class Following Inheritance object Following Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count The number of blogs the user is following. [JsonProperty(PropertyName = \"total_blogs\")] public int Count { get; set; } Property Value int Result An array of BlogBase instances, representing information about each followed blog. [JsonProperty(PropertyName = \"blogs\")] public BlogBase[] Result { get; set; } Property Value BlogBase[]"
  },
  "api/DontPanic.TumblrSharp.Client.Likes.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Likes.html",
    "title": "Class Likes | NewTumblrSharp",
    "summary": "Class Likes Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains the user's likes. public class Likes Inheritance object Likes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Count Total number of liked posts. [JsonProperty(PropertyName = \"liked_count\")] public long Count { get; set; } Property Value long Result An array of BasePost instances, representing the liked posts. [JsonConverter(typeof(PostArrayConverter))] [JsonProperty(PropertyName = \"liked_posts\")] public BasePost[] Result { get; set; } Property Value BasePost[]"
  },
  "api/DontPanic.TumblrSharp.Client.LinkPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.LinkPost.html",
    "title": "Class LinkPost | NewTumblrSharp",
    "summary": "Class LinkPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a link post. public class LinkPost : BasePost Inheritance object BasePost LinkPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Description A user-supplied description. [JsonProperty(PropertyName = \"description\")] public string Description { get; set; } Property Value string LinkUrl The link. [JsonProperty(PropertyName = \"url\")] public string LinkUrl { get; set; } Property Value string Title The title of the page the link points to. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.NoteConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.NoteConverter.html",
    "title": "Class NoteConverter | NewTumblrSharp",
    "summary": "Class NoteConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll convert note public class NoteConverter : JsonConverter Inheritance object JsonConverter NoteConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Photo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Photo.html",
    "title": "Class Photo | NewTumblrSharp",
    "summary": "Class Photo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a photo in a PhotoPost. public class Photo Inheritance object Photo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AlternateSizes An array of PhotoInfo instances for alternate (thumbnail) versions of the photo. [JsonProperty(\"alt_sizes\")] public PhotoInfo[] AlternateSizes { get; set; } Property Value PhotoInfo[] Caption User supplied caption for the individual photo (Photosets only). [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string Exif Exif-Data from Photo [JsonProperty(\"exif\")] public Exif Exif { get; set; } Property Value Exif OriginalSize A PhotoInfo instance representing the details of the full-size photo. [JsonProperty(\"original_size\")] public PhotoInfo OriginalSize { get; set; } Property Value PhotoInfo"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoInfo.html",
    "title": "Class PhotoInfo | NewTumblrSharp",
    "summary": "Class PhotoInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents information about a Photo. public class PhotoInfo Inheritance object PhotoInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Height The photo height, in pixels. [JsonProperty(\"height\")] public int Height { get; set; } Property Value int ImageUrl The url of the photo. [JsonProperty(\"url\")] public string ImageUrl { get; set; } Property Value string Width The photo width, in pixels. [JsonProperty(\"width\")] public int Width { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PhotoPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PhotoPost.html",
    "title": "Class PhotoPost | NewTumblrSharp",
    "summary": "Class PhotoPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a photo post. public class PhotoPost : BasePost Inheritance object BasePost PhotoPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Caption The user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string Photo Gets the main (or only, for photo posts with only one picture) photo for the post. public Photo Photo { get; } Property Value Photo PhotoSet An array of Photo instances. [JsonProperty(\"photos\")] public Photo[] PhotoSet { get; set; } Property Value Photo[]"
  },
  "api/DontPanic.TumblrSharp.Client.Player.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Player.html",
    "title": "Class Player | NewTumblrSharp",
    "summary": "Class Player Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents an embeddable player for a video in a VideoPost. public class Player Inheritance object Player Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmbedCode The HTML code for embedding the video. [JsonProperty(\"embed_code\")] public string EmbedCode { get; set; } Property Value string Width The width of the player. [JsonProperty(\"width\")] public int Width { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.PostArrayConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostArrayConverter.html",
    "title": "Class PostArrayConverter | NewTumblrSharp",
    "summary": "Class PostArrayConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts post objects to the proper post type. public class PostArrayConverter : JsonConverter Inheritance object JsonConverter PostArrayConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.PostAttributionNote.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostAttributionNote.html",
    "title": "Class PostAttributionNote | NewTumblrSharp",
    "summary": "Class PostAttributionNote Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll PostAttributionNote public class PostAttributionNote : BaseNote Inheritance object BaseNote PostAttributionNote Inherited Members BaseNote.Type BaseNote.Timestamp BaseNote.BlogName BaseNote.BlogUuid BaseNote.BlogUrl BaseNote.Followed BaseNote.AvatarShape BaseNote.ReplyText BaseNote.PostId BaseNote.ReblogParentBlogName BaseNote.Equals(object) BaseNote.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Photo_height Photo_height public int Photo_height { get; set; } Property Value int Photo_url Photo_url public string Photo_url { get; set; } Property Value string Photo_width Photo_width public int Photo_width { get; set; } Property Value int Post_attribution_type post_attribution_type public string Post_attribution_type { get; set; } Property Value string Post_attribution_type_name post_attribution_type_name public string Post_attribution_type_name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.PostCreationInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.PostCreationInfo.html",
    "title": "Class PostCreationInfo | NewTumblrSharp",
    "summary": "Class PostCreationInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents information about a newly created post. public class PostCreationInfo Inheritance object PostCreationInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PostId The identifier of the post. [JsonProperty(\"id\")] public long PostId { get; set; } Property Value long"
  },
  "api/DontPanic.TumblrSharp.Client.Posts.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Posts.html",
    "title": "Class Posts | NewTumblrSharp",
    "summary": "Class Posts Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a blog's posts. public class Posts Inheritance object Posts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blog A BlogInfo instance representing information about the blog for which the posts are being retrieved. [JsonProperty(PropertyName = \"blog\")] public BlogInfo Blog { get; set; } Property Value BlogInfo Result An array of BasePost instances, containing the blog's posts. [JsonConverter(typeof(PostArrayConverter))] [JsonProperty(PropertyName = \"posts\")] public BasePost[] Result { get; set; } Property Value BasePost[]"
  },
  "api/DontPanic.TumblrSharp.Client.QuotePost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.QuotePost.html",
    "title": "Class QuotePost | NewTumblrSharp",
    "summary": "Class QuotePost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a quote post. public class QuotePost : BasePost Inheritance object BasePost QuotePost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Source Full HTML for the source of the quote. [JsonProperty(PropertyName = \"source\")] public string Source { get; set; } Property Value string Text The text of the quote. [JsonProperty(PropertyName = \"text\")] public string Text { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.Reblog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Reblog.html",
    "title": "Class Reblog | NewTumblrSharp",
    "summary": "Class Reblog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll reblog public class Reblog Inheritance object Reblog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Comment Comment [JsonProperty(PropertyName = \"comment\")] public string Comment { get; set; } Property Value string TreeHtml Tree Html [JsonProperty(PropertyName = \"tree_html\")] public string TreeHtml { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TextPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TextPost.html",
    "title": "Class TextPost | NewTumblrSharp",
    "summary": "Class TextPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a text post. public class TextPost : BasePost Inheritance object BasePost TextPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Body The full post body. [JsonProperty(PropertyName = \"body\")] public string Body { get; set; } Property Value string Title The optional title of the post. [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.TimestampConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TimestampConverter.html",
    "title": "Class TimestampConverter | NewTumblrSharp",
    "summary": "Class TimestampConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converts a timestamp to a DateTime. public class TimestampConverter : JsonConverter Inheritance object JsonConverter TimestampConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.Trail.html": {
    "href": "api/DontPanic.TumblrSharp.Client.Trail.html",
    "title": "Class Trail | NewTumblrSharp",
    "summary": "Class Trail Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Trail public class Trail Inheritance object Trail Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blog the blog [JsonProperty(PropertyName = \"blog\")] public TrailBlog Blog { get; set; } Property Value TrailBlog Content Content [JsonProperty(PropertyName = \"content\")] public string Content { get; set; } Property Value string ContentRaw ContentRaw [JsonProperty(PropertyName = \"content_raw\")] public string ContentRaw { get; set; } Property Value string Post the post that trail [JsonProperty(PropertyName = \"post\")] public TrailPost Post { get; set; } Property Value TrailPost Methods Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailBlog.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailBlog.html",
    "title": "Class TrailBlog | NewTumblrSharp",
    "summary": "Class TrailBlog Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll The blog from Trail public class TrailBlog Inheritance object TrailBlog Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Active is Blog active [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"active\")] public bool Active { get; set; } Property Value bool CanBeFollowed can be followed [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"can_be_followed\")] public bool CanBeFollowed { get; set; } Property Value bool Name the name of the blog [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string ShareFollowing share following [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"share_following\")] public bool ShareFollowing { get; set; } Property Value bool ShareLikes share likes [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"share_likes\")] public bool ShareLikes { get; set; } Property Value bool Theme theme of the blog [JsonConverter(typeof(TrailThemeConverter))] [JsonProperty(PropertyName = \"theme\")] public TrailTheme Theme { get; set; } Property Value TrailTheme Methods Equals(object) Compare a trailblog with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool bool GetHashCode() return a hash code public override int GetHashCode() Returns int hashcode as int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailConverter.html",
    "title": "Class TrailConverter | NewTumblrSharp",
    "summary": "Class TrailConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll convert trail public class TrailConverter : JsonConverter Inheritance object JsonConverter TrailConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.TrailPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailPost.html",
    "title": "Class TrailPost | NewTumblrSharp",
    "summary": "Class TrailPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll post object from Trail public class TrailPost Inheritance object TrailPost Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id id from post [JsonProperty(PropertyName = \"id\")] public long Id { get; set; } Property Value long Methods Equals(object) compare trailposts public override bool Equals(object obj) Parameters obj object to compare object Returns bool true for obj is equal GetHashCode() hash code for a trailpost public override int GetHashCode() Returns int hashcode"
  },
  "api/DontPanic.TumblrSharp.Client.TrailTheme.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailTheme.html",
    "title": "Class TrailTheme | NewTumblrSharp",
    "summary": "Class TrailTheme Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll theme of a blog see Theme public class TrailTheme Inheritance object TrailTheme Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AvatarShape avatarshape [JsonProperty(PropertyName = \"avatar_shape\")] public AvatarShape AvatarShape { get; set; } Property Value AvatarShape BackgroundColor Backgroundcolor [JsonProperty(PropertyName = \"background_color\")] public Color BackgroundColor { get; set; } Property Value Color BodyFont font of the body [JsonProperty(PropertyName = \"body_font\")] public string BodyFont { get; set; } Property Value string HeaderBounds bounds of the header [JsonProperty(PropertyName = \"header_bounds\")] public string HeaderBounds { get; set; } Property Value string HeaderFocusHeight focus height of the header [JsonProperty(PropertyName = \"header_focus_height\")] public int HeaderFocusHeight { get; set; } Property Value int HeaderFocusWidth focus width of the header [JsonProperty(PropertyName = \"header_focus_width\")] public int HeaderFocusWidth { get; set; } Property Value int HeaderFullHeight full height of the header [JsonProperty(PropertyName = \"header_full_height\")] public int HeaderFullHeight { get; set; } Property Value int HeaderFullWidth full width of the header [JsonProperty(PropertyName = \"header_full_width\")] public int HeaderFullWidth { get; set; } Property Value int HeaderImage image from the header [JsonProperty(PropertyName = \"header_image\")] public string HeaderImage { get; set; } Property Value string HeaderImageFocused focused image from the header [JsonProperty(PropertyName = \"header_image_focused\")] public string HeaderImageFocused { get; set; } Property Value string HeaderImageScaled scaled image from the header [JsonProperty(PropertyName = \"header_image_scaled\")] public string HeaderImageScaled { get; set; } Property Value string HeaderStretch is the header stretched [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"header_stretch\")] public bool HeaderStretch { get; set; } Property Value bool LinkColor color of link [JsonProperty(PropertyName = \"link_color\")] public Color LinkColor { get; set; } Property Value Color ShowAvatar show the avatar [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_avatar\")] public bool ShowAvatar { get; set; } Property Value bool ShowDescription show the description [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_description\")] public bool ShowDescription { get; set; } Property Value bool ShowHeaderImage show headerimage [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_header_image\")] public bool ShowHeaderImage { get; set; } Property Value bool ShowTitle show title [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"show_title\")] public bool ShowTitle { get; set; } Property Value bool TitleColor color of the title [JsonProperty(PropertyName = \"title_color\")] public Color TitleColor { get; set; } Property Value Color TitleFont font of the title [JsonProperty(PropertyName = \"title_font\")] public string TitleFont { get; set; } Property Value string TitleFontWeight weight of the font from title [JsonProperty(PropertyName = \"title_font_weight\")] public string TitleFontWeight { get; set; } Property Value string Methods Equals(object) compare this object with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool GetHashCode() return a hash code public override int GetHashCode() Returns int hashcode as int"
  },
  "api/DontPanic.TumblrSharp.Client.TrailThemeConverter.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TrailThemeConverter.html",
    "title": "Class TrailThemeConverter | NewTumblrSharp",
    "summary": "Class TrailThemeConverter Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Converter for trail theme public class TrailThemeConverter : JsonConverter Inheritance object JsonConverter TrailThemeConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.Client.TumblrClient.html": {
    "href": "api/DontPanic.TumblrSharp.Client.TumblrClient.html",
    "title": "Class TumblrClient | NewTumblrSharp",
    "summary": "Class TumblrClient Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Encapsulates the Tumblr API. public class TumblrClient : TumblrClientBase, IDisposable Inheritance object TumblrClientBase TumblrClient Implements IDisposable Inherited Members TumblrClientBase.OAuthToken TumblrClientBase.CallApiMethodAsync<TResponse, TResult>(ApiMethod, Func<TResponse, TResult>, CancellationToken, IEnumerable<JsonConverter>) TumblrClientBase.CallApiMethodNoResultAsync(ApiMethod, CancellationToken) TumblrClientBase.CallApiMethodAsync<TResult>(ApiMethod, CancellationToken, IEnumerable<JsonConverter>) TumblrClientBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TumblrClient(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. public TumblrClient(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .Net Standard 1.1+, .Net Core 2.2+ TumblrClient(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClient class. public TumblrClient(IHttpClientFactory httpClientFactory, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr App-Registration: http://www.tumblr.com/oauth/apps platform: .Net Standard 2.0+, .Net Core 2.2+ Methods CreatePostAsync(string, PostData) Asynchronously creates a new post. public Task<PostCreationInfo> CreatePostAsync(string blogName, PostData postData) Parameters blogName string The name of the blog where to post to (must be one of the current user's blogs). postData PostData The data that represents the type of post to create. See PostData for how to create various post types. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posting Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. CreatePostAsync(string, PostData, CancellationToken) Asynchronously creates a new post. public Task<PostCreationInfo> CreatePostAsync(string blogName, PostData postData, CancellationToken cancellationToken) Parameters blogName string The name of the blog where to post to (must be one of the current user's blogs). postData PostData The data that represents the type of post to create. See PostData for how to create various post types. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posting Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. DeletePostAsync(string, long) Asynchronously deletes a post. public Task DeletePostAsync(string blogName, long postId) Parameters blogName string The name of the blog to which the post to delete belongs. postId long The identifier of the post to delete. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#deleting-posts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. Dispose(bool) Disposes of the object. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources have to be disposed; otherwise false. EditPostAsync(string, long, PostData) Asynchronously edits an existing post. public Task<PostCreationInfo> EditPostAsync(string blogName, long postId, PostData postData) Parameters blogName string The name of the blog where the post to edit is (must be one of the current user's blogs). postId long The identifier of the post to edit. postData PostData The data that represents the updated information for the post. See PostData for how to create various post types. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#editing Exceptions ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. EditPostAsync(string, long, PostData, CancellationToken) Asynchronously edits an existing post. public Task<PostCreationInfo> EditPostAsync(string blogName, long postId, PostData postData, CancellationToken cancellationToken) Parameters blogName string The name of the blog where the post to edit is (must be one of the current user's blogs). postId long The identifier of the post to edit. postData PostData The data that represents the updated information for the post. See PostData for how to create various post types. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#editing Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. postData is null. ArgumentException blogName is empty. postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. FollowAsync(string) Asynchronously follows a blog. public Task FollowAsync(string blogUrl) Parameters blogUrl string The url of the blog to follow. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-follow Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogUrl is null. ArgumentException blogUrl is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. GetBlogInfoAsync(string) Asynchronously retrieves general information about the blog, such as the title, number of posts, and other high-level data. public Task<BlogInfo> GetBlogInfoAsync(string blogName) Parameters blogName string The name of the blog. Returns Task<BlogInfo> A Task<BlogInfo> that can be used to track the operation. If the task succeeds, the Result will carry a BlogInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-info. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. GetBlogLikesAsync(string, int, int, DateTime?, DateTime?) Asynchronously retrieves the publicly exposed likes from a blog. public Task<Likes> GetBlogLikesAsync(string blogName, int startIndex = 0, int count = 20, DateTime? before = null, DateTime? after = null) Parameters blogName string The name of the blog. startIndex int The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. before DateTime? The timestamp before when to retrieve likes. after DateTime? The timestamp after when to retrieve likes. Returns Task<Likes> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-likes Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. GetDashboardPostsAsync(long, DashboardOption, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. public Task<BasePost[]> GetDashboardPostsAsync(long Id, DashboardOption drashboardType, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters Id long Returns posts that appeared either after or before the given Id. after or before The drashboardType parameter takes a number. drashboardType DashboardOption After returns newer posts, Before returns older posts startIndex long The post number to start at. count int The number of posts to return. type PostType The PostType to return. includeReblogInfo bool Whether or not the response should include reblog info. includeNotesInfo bool Whether or not the response should include notes info. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result\"/> will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException Id is less than 0. startIndex is less than 0. count is less than 1 or greater than 20. GetDashboardPostsAsync(long, long, int, PostType, bool, bool) Asynchronously retrieves posts from the current user's dashboard. public Task<BasePost[]> GetDashboardPostsAsync(long sinceId = 0, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters sinceId long Return posts that have appeared after the specified ID. Use this parameter to page through the results: first get a set of posts, and then get posts since the last ID of the previous set. startIndex long The post number to start at. count int The number of posts to return. type PostType The PostType to return. includeReblogInfo bool Whether or not the response should include reblog info. includeNotesInfo bool Whether or not the response should include notes info. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result\"/> will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException sinceId is less than 0. startIndex is less than 0. count is less than 1 or greater than 20. GetDraftPostsAsync(string, long, PostFilter) Asynchronously returns draft posts. public Task<BasePost[]> GetDraftPostsAsync(string blogName, long sinceId = 0, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve drafted posts. sinceId long Return posts that have appeared after the specified ID. Use this parameter to page through the results: first get a set of posts, and then get posts since the last ID of the previous set. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-drafts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException sinceId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. GetFollowersAsync(string, int, int) Asynchronously retrieves a blog's followers. public Task<Followers> GetFollowersAsync(string blogName, int startIndex = 0, int count = 20) Parameters blogName string The name of the blog. startIndex int The offset at which to start retrieving the followers. Use 0 to start retrieving from the latest follower. count int The number of followers to retrieve. Must be between 1 and 20. Returns Task<Followers> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Followers instance. Otherwise Exception will carry a TumblrException A Followers instance. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-followers Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. GetFollowingAsync(long, int) Asynchronously retrieves the blog that the current user is following. public Task<Following> GetFollowingAsync(long startIndex = 0, int count = 20) Parameters startIndex long The offset at which to start retrieving the followed blogs. Use 0 to start retrieving from the latest followed blog. count int The number of following blogs to retrieve. Must be between 1 and 20. Returns Task<Following> A Task that can be used to track the operation. If the task succeeds, the Result will carry a Following instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-following Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. GetLikesAsync(long, int, DateTime?, DateTime?) Asynchronously retrieves the current user's likes. public Task<Likes> GetLikesAsync(long startIndex = 0, int count = 20, DateTime? before = null, DateTime? after = null) Parameters startIndex long The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. before DateTime? The timestamp before when to retrieve likes. after DateTime? The timestamp after when to retrieve likes. Returns Task<Likes> A Task that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-likes Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. GetPostAsync(string, long, bool, bool) Asynchronously retrieves a specific post by id. public Task<BasePost> GetPostAsync(string blogName, long id, bool includeReblogInfo = false, bool includeNotesInfo = false) Parameters blogName string Blog name to reference id long The id of the post to retrieve. includeReblogInfo bool Whether or not to include reblog info with the posts. includeNotesInfo bool Whether or not to include notes info with the posts. Returns Task<BasePost> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a BasePost instance representing the desired post. Otherwise Exception will carry a TumblrException if the post with the specified id cannot be found. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException id is less than 0. GetPostsAsync(string, long, int, PostType, bool, bool, PostFilter, string) Asynchronously retrieves published posts from a blog. public Task<Posts> GetPostsAsync(string blogName, long startIndex = 0, int count = 20, PostType type = PostType.All, bool includeReblogInfo = false, bool includeNotesInfo = false, PostFilter filter = PostFilter.Html, string tag = null) Parameters blogName string The name of the blog. startIndex long The offset at which to start retrieving the posts. Use 0 to start retrieving from the latest post. count int The number of posts to retrieve. Must be between 1 and 20. type PostType The PostType to retrieve. includeReblogInfo bool Whether or not to include reblog info with the posts. includeNotesInfo bool Whether or not to include notes info with the posts. filter PostFilter A PostFilter to apply. tag string A tag to filter by. Returns Task<Posts> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Posts instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#posts Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. GetQueuedPostsAsync(string, long, int, PostFilter) Asynchronously returns posts in the current user's queue. public Task<BasePost[]> GetQueuedPostsAsync(string blogName, long startIndex = 0, int count = 20, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve queued posts. startIndex long The offset at which to start retrieving the posts. Use 0 to start retrieving from the latest post. count int The number of posts to retrieve. Must be between 1 and 20. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-queue Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. GetSubmissionPostsAsync(string, long, PostFilter) Asynchronously retrieves submission posts. public Task<BasePost[]> GetSubmissionPostsAsync(string blogName, long startIndex = 0, PostFilter filter = PostFilter.Html) Parameters blogName string The name of the blog for which to retrieve submission posts. startIndex long The post number to start at. Pass 0 to start from the first post. filter PostFilter A PostFilter to apply. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result; will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#blog-submissions Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. ArgumentException blogName is empty. ArgumentOutOfRangeException startIndex is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. GetTaggedPostsAsync(string, DateTime?, int, PostFilter) Asynchronously retrieves posts that have been tagged with a specific tag. public Task<BasePost[]> GetTaggedPostsAsync(string tag, DateTime? before = null, int count = 20, PostFilter filter = PostFilter.Html) Parameters tag string The tag on the posts to retrieve. before DateTime? The timestamp of when to retrieve posts before. count int The number of posts to retrieve. filter PostFilter A PostFilter. Returns Task<BasePost[]> A Task<BasePost[]> that can be used to track the operation. If the task succeeds, the Task<BasePost[]>.Result will carry an array of posts. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-tagged Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException tag is null. ArgumentException tag is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException count is less than 1 or greater than 20. GetUserInfoAsync() Asynchronously retrieves the user's account information that matches the OAuth credentials submitted with the request. public Task<UserInfo> GetUserInfoAsync() Returns Task<UserInfo> A Task that can be used to track the operation. If the task succeeds, the Result will carry a UserInfo instance. Otherwise Exception will carry the TumblrException generated during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#user-methods Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. GetUserLikesAsync(int, int) Asynchronously retrieves the current user's likes. public Task<Likes> GetUserLikesAsync(int startIndex = 0, int count = 20) Parameters startIndex int The offset at which to start retrieving the likes. Use 0 to start retrieving from the latest like. count int The number of likes to retrieve. Must be between 1 and 20. Returns Task<Likes> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a Likes instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#m-ug-likes Exceptions ObjectDisposedException The object has been disposed. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ArgumentOutOfRangeException startIndex is less than 0. count is less than 1 or greater than 20. LikeAsync(long, string) Asynchronously likes a post. public Task LikeAsync(long postId, string reblogKey) Parameters postId long The identifier of the post to like. reblogKey string The reblog key for the post. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-like Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException reblogKey is null. ArgumentException reblogKey is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ReblogAsync(string, long, string, PostCreationState, DateTime?, string) Asynchronously reblogs a post. public Task<PostCreationInfo> ReblogAsync(string blogName, long postId, string reblogKey, PostCreationState state, DateTime? publish_On = null, string comment = null) Parameters blogName string The name of the blog where to reblog the psot (must be one of the current user's blogs). postId long The identifier of the post to reblog. reblogKey string The post reblog key. state PostCreationState Post creation state publish_On DateTime? if state is Queue is this the publishingtime comment string An optional comment to add to the reblog. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#reblogging Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. reblogKey is null. ArgumentException /// blogName is empty. reblogKey is empty. publish_On is in the past. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. ReblogAsync(string, long, string, string) Asynchronously reblogs a post. public Task<PostCreationInfo> ReblogAsync(string blogName, long postId, string reblogKey, string comment = null) Parameters blogName string The name of the blog where to reblog the psot (must be one of the current user's blogs). postId long The identifier of the post to reblog. reblogKey string The post reblog key. comment string An optional comment to add to the reblog. Returns Task<PostCreationInfo> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a PostCreationInfo instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Remarks See: http://www.tumblr.com/docs/en/api/v2#reblogging Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogName is null. reblogKey is null. ArgumentException /// blogName is empty. reblogKey is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. UnfollowAsync(string) Asynchronously unfollows a blog. public Task UnfollowAsync(string blogUrl) Parameters blogUrl string The url of the blog to unfollow. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-unfollow Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException blogUrl is null. ArgumentException blogUrl is empty. InvalidOperationException This TumblrClient instance does not have an OAuth token specified. UnlikeAsync(long, string) Asynchronously unlikes a post. public Task UnlikeAsync(long postId, string reblogKey) Parameters postId long The identifier of the post to like. reblogKey string The reblog key for the post. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException Remarks See: http://www.tumblr.com/docs/en/api/v2#m-up-unlike Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException reblogKey is null. ArgumentException reblogKey is empty. ArgumentOutOfRangeException postId is less than 0. InvalidOperationException This TumblrClient instance does not have an OAuth token specified."
  },
  "api/DontPanic.TumblrSharp.Client.UserBlogInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserBlogInfo.html",
    "title": "Class UserBlogInfo | NewTumblrSharp",
    "summary": "Class UserBlogInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a user's blog. public class UserBlogInfo : BlogBase Inheritance object BlogBase UserBlogInfo Inherited Members BlogBase.Title BlogBase.Name BlogBase.Url BlogBase.LastUpdated object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BlogType The type of blog (public or private). [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"type\")] public BlogType BlogType { get; set; } Property Value BlogType DraftsCount The number of posts in Draft state. [JsonProperty(PropertyName = \"drafts\")] public int DraftsCount { get; set; } Property Value int FollowersCount Total count of followers for this blog. [JsonProperty(PropertyName = \"followers\")] public long FollowersCount { get; set; } Property Value long IsFacebookPostEnabled Whether the automatic posting to Facebook of posts is enabled or not. [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"facebook\")] public bool IsFacebookPostEnabled { get; set; } Property Value bool IsPrimary Indicates if this is the user's primary blog. [JsonProperty(PropertyName = \"primary\")] public bool IsPrimary { get; set; } Property Value bool IsSharingLikes Whether if the user likes are public or not. [JsonProperty(PropertyName = \"share_likes\")] public bool IsSharingLikes { get; set; } Property Value bool IsTweetEnabled Whether the automatic tweet of posts is enabled or not. [JsonConverter(typeof(BoolConverter))] [JsonProperty(PropertyName = \"tweet\")] public bool IsTweetEnabled { get; set; } Property Value bool MessagesCount [JsonProperty(PropertyName = \"messages\")] public int MessagesCount { get; set; } Property Value int QueueCount The number of posts in Queue state. [JsonProperty(PropertyName = \"queue\")] public int QueueCount { get; set; } Property Value int"
  },
  "api/DontPanic.TumblrSharp.Client.UserInfo.html": {
    "href": "api/DontPanic.TumblrSharp.Client.UserInfo.html",
    "title": "Class UserInfo | NewTumblrSharp",
    "summary": "Class UserInfo Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Contains information about a user's account. public class UserInfo Inheritance object UserInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Blogs An array of UserBlogInfo instances, containing information about the user's blogs. [JsonProperty(PropertyName = \"blogs\")] public UserBlogInfo[] Blogs { get; set; } Property Value UserBlogInfo[] DefaultPostFormat The user's default PostFormat. [JsonConverter(typeof(EnumStringConverter))] [JsonProperty(PropertyName = \"default_post_format\")] public PostFormat DefaultPostFormat { get; set; } Property Value PostFormat FollowingCount The number of blogs the user is following [JsonProperty(PropertyName = \"following\")] public long FollowingCount { get; set; } Property Value long LikesCount The total count of the user's likes [JsonProperty(PropertyName = \"likes\")] public long LikesCount { get; set; } Property Value long Name The user's tumblr short name. [JsonProperty(PropertyName = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.VideoPost.html": {
    "href": "api/DontPanic.TumblrSharp.Client.VideoPost.html",
    "title": "Class VideoPost | NewTumblrSharp",
    "summary": "Class VideoPost Namespace DontPanic.TumblrSharp.Client Assembly DontPanic.TumblrSharp.Client.dll Represents a video post. public class VideoPost : BasePost Inheritance object BasePost VideoPost Inherited Members BasePost.Type BasePost.BlogName BasePost.Id BasePost.Url BasePost.Slug BasePost.Timestamp BasePost.State BasePost.Format BasePost.ReblogKey BasePost.Tags BasePost.ShortUrl BasePost.Summary BasePost.NotesCount BasePost.Notes BasePost.SourceUrl BasePost.SourceTitle BasePost.NumberOfPostsInResponse BasePost.Liked BasePost.IsMobile BasePost.IsBookmarklet BasePost.Reblog BasePost.RebloggedFromId BasePost.RebloggedFromUrl BasePost.RebloggedFromName BasePost.RebloggedFromTitle BasePost.RebloggedRootId BasePost.RebloggedRootUrl BasePost.RebloggedRootName BasePost.RebloggedRootTitle BasePost.Trails object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Caption The user-supplied caption. [JsonProperty(\"caption\")] public string Caption { get; set; } Property Value string Duration The video duration in seconds, or 0 if the duration is not specified. [JsonProperty(\"duration\")] public double Duration { get; set; } Property Value double IsHtml5Capable Signals whether the video is HTML5 capable or not. [JsonProperty(\"html5_capable\")] public bool IsHtml5Capable { get; set; } Property Value bool Player An array of Player instances. [JsonProperty(\"player\")] public Player[] Player { get; set; } Property Value Player[] ThumbnailHeight The thumbnail image height. [JsonProperty(\"thumbnail_height\")] public int ThumbnailHeight { get; set; } Property Value int ThumbnailUrl Url to the thumbnail image for the video. [JsonProperty(\"thumbnail_url\")] public string ThumbnailUrl { get; set; } Property Value string ThumbnailWidth The thumbnail image width. [JsonProperty(\"thumbnail_width\")] public int ThumbnailWidth { get; set; } Property Value int VideoUrl Url to the video file (may be null if the video can only be embedded, i.e.: YouTube). [JsonProperty(\"video_url\")] public string VideoUrl { get; set; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.Client.html": {
    "href": "api/DontPanic.TumblrSharp.Client.html",
    "title": "Namespace DontPanic.TumblrSharp.Client | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp.Client Classes AnswerPost Represents an answer post. AudioPost Represents an audio post. BaseNote Base class for post notes. BasePost Base class for post types. BlogBase Contains common properties for a blog. BlogInfo Contains information about a blog. BoolConverter Converts \"Y\" and \"N\" to boolean. ChatFragment Represents a fragment of a ChatPost. ChatPost Represents a chat post. EnumStringConverter Generic converter for enumerations. Exif Exif ExtensionService extensionclass for IServiceCollection Followers Contains information about a blog's followers. Following Contains the blogs that a user is following. Likes Contains the user's likes. LinkPost Represents a link post. NoteConverter convert note Photo Represents a photo in a PhotoPost. PhotoInfo Represents information about a Photo. PhotoPost Represents a photo post. Player Represents an embeddable player for a video in a VideoPost. PostArrayConverter Converts post objects to the proper post type. PostAttributionNote PostAttributionNote PostCreationInfo Represents information about a newly created post. Posts Contains information about a blog's posts. QuotePost Represents a quote post. Reblog reblog TextPost Represents a text post. TimestampConverter Converts a timestamp to a DateTime. Trail Trail TrailBlog The blog from Trail TrailConverter convert trail TrailPost post object from Trail TrailTheme theme of a blog see Theme TrailThemeConverter Converter for trail theme TumblrClient Encapsulates the Tumblr API. UserBlogInfo Contains information about a user's blog. UserInfo Contains information about a user's account. VideoPost Represents a video post. Enums DashboardOption Option for get dashboardpost, before or after a spezifics Id"
  },
  "api/DontPanic.TumblrSharp.DateTimeHelper.html": {
    "href": "api/DontPanic.TumblrSharp.DateTimeHelper.html",
    "title": "Class DateTimeHelper | NewTumblrSharp",
    "summary": "Class DateTimeHelper Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Converts from Unix-type timestamp to DateTime and vice-versa. public static class DateTimeHelper Inheritance object DateTimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromTimestamp(double) Converts from a timestamp to a DateTime. The result is in local time. public static DateTime FromTimestamp(double timestamp) Parameters timestamp double The timestamp. Returns DateTime The equivalent DateTime in local time. FromTimestamp(long) Converts from a timestamp to a DateTime. The result is in local time. public static DateTime FromTimestamp(long timestamp) Parameters timestamp long The timestamp. Returns DateTime The equivalent DateTime in local time. ToTimestamp(DateTime) Converts from a DateTime to a timestamp. public static long ToTimestamp(DateTime date) Parameters date DateTime The DateTime. Returns long The timestamp."
  },
  "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.html": {
    "href": "api/DontPanic.TumblrSharp.ExtensionHttpRequestMessage.html",
    "title": "Class ExtensionHttpRequestMessage | NewTumblrSharp",
    "summary": "Class ExtensionHttpRequestMessage Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Extensionsclass for HttpRequestMessage public static class ExtensionHttpRequestMessage Inheritance object ExtensionHttpRequestMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PreparationForTumblrClient(HttpRequestMessage, IHmacSha1HashProvider, string, string, Token) set the authoriaztionheader for TumblrClient public static Task PreparationForTumblrClient(this HttpRequestMessage request, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters request HttpRequestMessage hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token Returns Task"
  },
  "api/DontPanic.TumblrSharp.HmacSha1HashProvider.html": {
    "href": "api/DontPanic.TumblrSharp.HmacSha1HashProvider.html",
    "title": "Class HmacSha1HashProvider | NewTumblrSharp",
    "summary": "Class HmacSha1HashProvider Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Provides an implementation of IHmacSha1HashProvider for signing OAuth requests. public class HmacSha1HashProvider : IHmacSha1HashProvider Inheritance object HmacSha1HashProvider Implements IHmacSha1HashProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request. public string ComputeHash(string consumerSecret, string oauthSecret, string signatureBaseString) Parameters consumerSecret string The consumer secret. oauthSecret string The OAuth secret. signatureBaseString string The signature base string for which to compute the hash. Returns string A HMAC-SHA1 hash of signatureBaseString."
  },
  "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.html": {
    "href": "api/DontPanic.TumblrSharp.IHmacSha1HashProvider.html",
    "title": "Interface IHmacSha1HashProvider | NewTumblrSharp",
    "summary": "Interface IHmacSha1HashProvider Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Provides HMAC-SHA1 hash for signing OAuth requests. public interface IHmacSha1HashProvider Methods ComputeHash(string, string, string) Gets a HMAC-SHA1 hash for an OAuth request. string ComputeHash(string consumerSecret, string oauthSecret, string signatureBaseString) Parameters consumerSecret string The consumer secret. oauthSecret string The OAuth secret. signatureBaseString string The signature base string for which to compute the hash. Returns string A HMAC-SHA1 hash of signatureBaseString."
  },
  "api/DontPanic.TumblrSharp.IMethodParameter.html": {
    "href": "api/DontPanic.TumblrSharp.IMethodParameter.html",
    "title": "Interface IMethodParameter | NewTumblrSharp",
    "summary": "Interface IMethodParameter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a parameter for an ApiMethod. public interface IMethodParameter : IEquatable<IMethodParameter> Inherited Members IEquatable<IMethodParameter>.Equals(IMethodParameter) Properties Name Gets the parameter name. string Name { get; } Property Value string Methods AsHttpContent() Converts the parameter to a HttpContent. HttpContent AsHttpContent() Returns HttpContent The parameter as a HttpContent."
  },
  "api/DontPanic.TumblrSharp.ITumblrClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.ITumblrClientFactory.html",
    "title": "Interface ITumblrClientFactory | NewTumblrSharp",
    "summary": "Interface ITumblrClientFactory Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Generic factory for TumblrClientBase instances. public interface ITumblrClientFactory Methods Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient. TClient Create<TClient>(string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase)."
  },
  "api/DontPanic.TumblrSharp.MethodParameterSet.html": {
    "href": "api/DontPanic.TumblrSharp.MethodParameterSet.html",
    "title": "Class MethodParameterSet | NewTumblrSharp",
    "summary": "Class MethodParameterSet Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll A sorted set of IMethodParameter instances. public class MethodParameterSet : SortedSet<IMethodParameter>, IReadOnlyCollection<IMethodParameter>, ISet<IMethodParameter>, ICollection<IMethodParameter>, IEnumerable<IMethodParameter>, ICollection, IEnumerable, IDeserializationCallback, ISerializable Inheritance object SortedSet<IMethodParameter> MethodParameterSet Implements IReadOnlyCollection<IMethodParameter> ISet<IMethodParameter> ICollection<IMethodParameter> IEnumerable<IMethodParameter> ICollection IEnumerable IDeserializationCallback ISerializable Inherited Members SortedSet<IMethodParameter>.Add(IMethodParameter) SortedSet<IMethodParameter>.Clear() SortedSet<IMethodParameter>.Contains(IMethodParameter) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[]) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[], int) SortedSet<IMethodParameter>.CopyTo(IMethodParameter[], int, int) SortedSet<IMethodParameter>.CreateSetComparer() SortedSet<IMethodParameter>.CreateSetComparer(IEqualityComparer<IMethodParameter>) SortedSet<IMethodParameter>.ExceptWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.GetEnumerator() SortedSet<IMethodParameter>.GetObjectData(SerializationInfo, StreamingContext) SortedSet<IMethodParameter>.GetViewBetween(IMethodParameter, IMethodParameter) SortedSet<IMethodParameter>.IntersectWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsProperSubsetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsProperSupersetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsSubsetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.IsSupersetOf(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.OnDeserialization(object) SortedSet<IMethodParameter>.Overlaps(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.Remove(IMethodParameter) SortedSet<IMethodParameter>.RemoveWhere(Predicate<IMethodParameter>) SortedSet<IMethodParameter>.Reverse() SortedSet<IMethodParameter>.SetEquals(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.SymmetricExceptWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.UnionWith(IEnumerable<IMethodParameter>) SortedSet<IMethodParameter>.Comparer SortedSet<IMethodParameter>.Count SortedSet<IMethodParameter>.Max SortedSet<IMethodParameter>.Min object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MethodParameterSet() Initializes a new instance of the MethodParameterSet class. public MethodParameterSet() MethodParameterSet(IEnumerable<IMethodParameter>) Initializes a new instance of the MethodParameterSet class. public MethodParameterSet(IEnumerable<IMethodParameter> collection) Parameters collection IEnumerable<IMethodParameter> An enumerable list of IMethodParameter instances to insert in the set. Methods Add(string, bool, bool?) Adds a new parameter to the set. public void Add(string name, bool value, bool? defaultValue = null) Parameters name string The parameter name. value bool The parameter value. defaultValue bool? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, byte[]) Adds a new parameter to the set. public void Add(string name, byte[] value) Parameters name string The parameter name. value byte[] The parameter value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, double, double?) Adds a new parameter to the set. public void Add(string name, double value, double? defaultValue = null) Parameters name string The parameter name. value double The parameter value. defaultValue double? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, int, int?) Adds a new parameter to the set. public void Add(string name, int value, int? defaultValue = null) Parameters name string The parameter name. value int The parameter value. defaultValue int? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, long, long?) Adds a new parameter to the set. public void Add(string name, long value, long? defaultValue = null) Parameters name string The parameter name. value long The parameter value. defaultValue long? The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string. Add(string, string, string) Adds a new parameter to the set. public void Add(string name, string value, string defaultValue = null) Parameters name string The parameter name. value string The parameter value. defaultValue string The parameter's default value. Remarks Tumblr API methods define default values for most of the method's parameters. A parameter whose value equals to the default value can be omitted from the request; by specifying the defaultValue the parameter won't be added to the set if its value equals to the default value. Exceptions ArgumentNullException name is null. ArgumentException name name is empty or a whitespace string."
  },
  "api/DontPanic.TumblrSharp.NoteType.html": {
    "href": "api/DontPanic.TumblrSharp.NoteType.html",
    "title": "Enum NoteType | NewTumblrSharp",
    "summary": "Enum NoteType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the type of note on a post public enum NoteType Fields Like = 2 like Post_attribution = 4 post attribution Posted = 0 posted Reblog = 1 reblog Reply = 3 reply"
  },
  "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.IOAuthClientFactory.html",
    "title": "Interface IOAuthClientFactory | NewTumblrSharp",
    "summary": "Interface IOAuthClientFactory Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Factory for OAuthClient instances. public interface IOAuthClientFactory Methods Create(string, string) Creates a new OAuthClient instance. OAuthClient Create(string consumerKey, string consumerSecret) Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. Returns OAuthClient A OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClient.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClient.html",
    "title": "Class OAuthClient | NewTumblrSharp",
    "summary": "Class OAuthClient Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll A client for OAuth. public class OAuthClient Inheritance object OAuthClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class can be used to authorize the application to access the user's account. If the user authorizes the app, an access token will be generated that can then be used to make OAuth method calls. Constructors OAuthClient(IHmacSha1HashProvider, string, string) Initializes a new instance of the DontPanic.TumblrSharp.OAuth client class. public OAuthClient(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps Exceptions ArgumentNullException hashProvider is null. consumerKey is null. consumerSecret is null. ArgumentException consumerKey is empty. consumerSecret is empty. Methods GetAccessTokenAsync(Token, string) Gets the authorized access token that can be used to make OAuth calls. public Task<Token> GetAccessTokenAsync(Token requestToken, string verifierUrl) Parameters requestToken Token The rest token sent from the server to the callback url.que verifierUrl string The verifier url returned from the server. Returns Task<Token> The access token. Exceptions ArgumentNullException requestToken is null. verifierUrl is null. ArgumentException verifierUrl is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call. GetAccessTokenAsync(Token, string, string) Gets the authorized access token that can be used to make OAuth calls. public Task<Token> GetAccessTokenAsync(Token requestToken, string oAuthToken, string oAuthVerifier) Parameters requestToken Token The rest token sent from the server to the callback url que oAuthToken string oauth_token oAuthVerifier string oauth_verifier Returns Task<Token> The access token. Exceptions ArgumentNullException requestToken is null. oAuthToken is null. oAuthVerifier is null. ArgumentException oAuthToken is empty. oAuthVerifier is empty.. OAuthException An exception occurred during the method call. GetAuthorizeUrl(Token) Builds the url that is required to connect to the server, where the server will authenticate the user and ask for authorization. public Uri GetAuthorizeUrl(Token requestToken) Parameters requestToken Token The request token obtained during the call to GetRequestTokenAsync(string). Returns Uri The Uri where to direct the user to obtain authorization. Remarks After the User authenticates with the Service Provider and grants permission for Consumer access, the Consumer will be notified that the Request Token has been authorized and ready to be exchanged for an Access Token. The Service Provider will construct an HTTP GET request URL, and redirects the User’s web browser to that URL with the following parameters: oauth_token which is the request token and oauth_verifier which is the verification code tied to the request token. Exceptions ArgumentNullException requestToken is null. requestToken.Key is null. ArgumentException requestToken.Key is empty. GetRequestTokenAsync(string) Asynchronously gets a request token. public Task<Token> GetRequestTokenAsync(string callbackUrl) Parameters callbackUrl string The server redirects Users to this URL after they authorize access to their private data. Returns Task<Token> The request token. Remarks The Consumer obtains an unauthorized Request Token by asking the Service Provider to issue a Token. The Request Token’s sole purpose is to receive User approval and can only be used to obtain an Access Token. Exceptions ArgumentNullException callbackUrl is null. ArgumentException callbackUrl is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call. PerformXAuthAsync(string, string) Asynchronously performs XAuth. public Task<Token> PerformXAuthAsync(string userName, string password) Parameters userName string The user name. password string The user password. Returns Task<Token> The access Token. Remarks XAuth is mainly used in mobile applications, where the device does not (or can not) have a callback url. It uses the user name and password to get the access token from the server. Exceptions ArgumentNullException userName is null. password is null. ArgumentException userName is empty. password is empty. OAuthException Could not determine oauth_token and oauth_token_secret from server response. An exception occurred during the method call."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthClientFactory.html",
    "title": "Class OAuthClientFactory | NewTumblrSharp",
    "summary": "Class OAuthClientFactory Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Factory for OAuthClient instances. public class OAuthClientFactory : IOAuthClientFactory Inheritance object OAuthClientFactory Implements IOAuthClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(string, string) Creates a new OAuthClient instance. public OAuthClient Create(string consumerKey, string consumerSecret) Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. Returns OAuthClient A OAuthClient instance."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthException.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthException.html",
    "title": "Class OAuthException | NewTumblrSharp",
    "summary": "Class OAuthException Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Represents an error that occour during a OAuth call. public class OAuthException : Exception, ISerializable Inheritance object Exception OAuthException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OAuthException() Initializes a new instance of the OAuthException class. public OAuthException() OAuthException(string, Exception) Initializes a new instance of the OAuthException class. public OAuthException(string message, Exception innerException = null) Parameters message string The error message. innerException Exception An optional inner exception."
  },
  "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.OAuthMessageHandler.html",
    "title": "Class OAuthMessageHandler | NewTumblrSharp",
    "summary": "Class OAuthMessageHandler Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll MessageHandler for the HttpClient public class OAuthMessageHandler : DelegatingHandler, IDisposable Inheritance object HttpMessageHandler DelegatingHandler OAuthMessageHandler Implements IDisposable Inherited Members DelegatingHandler.Dispose(bool) DelegatingHandler.InnerHandler HttpMessageHandler.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OAuthMessageHandler(IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandler public OAuthMessageHandler(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token OAuthMessageHandler(HttpMessageHandler, IHmacSha1HashProvider, string, string, Token) Create OAuthMessageHandle public OAuthMessageHandler(HttpMessageHandler innerHandler, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken) Parameters innerHandler HttpMessageHandler hashProvider IHmacSha1HashProvider consumerKey string consumerSecret string oAuthToken Token Methods SendAsync(HttpRequestMessage, CancellationToken) Send methode protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) Parameters request HttpRequestMessage cancellationToken CancellationToken Returns Task<HttpResponseMessage>"
  },
  "api/DontPanic.TumblrSharp.OAuth.Token.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.Token.html",
    "title": "Class Token | NewTumblrSharp",
    "summary": "Class Token Namespace DontPanic.TumblrSharp.OAuth Assembly DontPanic.TumblrSharp.dll Represents a token for OAuth. public class Token : IEquatable<Token> Inheritance object Token Implements IEquatable<Token> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Token(string, string) Initializes a new instance of the Token class. public Token(string key, string secret) Parameters key string The token's key. secret string The token's secret. Properties IsValid true is the token is valid; otherwise false. public bool IsValid { get; } Property Value bool Remarks A token is valid if both Key and Secret are not null or empty. Key Gets the token's key. public string Key { get; } Property Value string Secret Gets the token's secret. public string Secret { get; } Property Value string"
  },
  "api/DontPanic.TumblrSharp.OAuth.html": {
    "href": "api/DontPanic.TumblrSharp.OAuth.html",
    "title": "Namespace DontPanic.TumblrSharp.OAuth | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp.OAuth Classes OAuthClient A client for OAuth. OAuthClientFactory Factory for OAuthClient instances. OAuthException Represents an error that occour during a OAuth call. OAuthMessageHandler MessageHandler for the HttpClient Token Represents a token for OAuth. Interfaces IOAuthClientFactory Factory for OAuthClient instances."
  },
  "api/DontPanic.TumblrSharp.PostCreationState.html": {
    "href": "api/DontPanic.TumblrSharp.PostCreationState.html",
    "title": "Enum PostCreationState | NewTumblrSharp",
    "summary": "Enum PostCreationState Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the creation state of a post. [JsonConverter(typeof(StringEnumConverter))] public enum PostCreationState Fields [EnumMember(Value = \"draft\")] Draft = 1 The post will be created as draft. [EnumMember(Value = \"private\")] Private = 3 The post will be created as private. [EnumMember(Value = \"published\")] Published = 0 The post will be created as published. [EnumMember(Value = \"queued\")] Queue = 2 The post will be created queued. [EnumMember(Value = \"submission\")] Submission = 4 The post is an unpublished submission"
  },
  "api/DontPanic.TumblrSharp.PostData.html": {
    "href": "api/DontPanic.TumblrSharp.PostData.html",
    "title": "Class PostData | NewTumblrSharp",
    "summary": "Class PostData Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a post to be submitted to a Tumblr blog. public class PostData Inheritance object PostData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class cannot be instantiated directly. Use one of the static factory methods to create an instance of this class. Properties Date Gets or sets the post date. public DateTimeOffset? Date { get; set; } Property Value DateTimeOffset? Format Gets or sets the PostFormat. public PostFormat Format { get; set; } Property Value PostFormat Publish_On Gets or sets the DateTime of publish this, if PostCreationState is Queue public DateTime? Publish_On { get; set; } Property Value DateTime? Slug Gets or sets the post slug. public string Slug { get; set; } Property Value string State Gets or sets the PostCreationState of the post. public PostCreationState State { get; set; } Property Value PostCreationState Tags Gets the tags associated with the post. public List<string> Tags { get; } Property Value List<string> Tweet Gets or sets the autotweet (if enabled) for this post: set to off for no tweet, or enter text to override the default tweet. public string Tweet { get; set; } Property Value string Methods CreateAnswer(string, IEnumerable<string>, PostCreationState) Creates the PostData for an answer post. public static PostData CreateAnswer(string answer, IEnumerable<string> tags, PostCreationState state) Parameters answer string The body of the answer post. tags IEnumerable<string> state PostCreationState Returns PostData CreateAudio(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. public static PostData CreateAudio(BinaryFile audioFile, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters audioFile BinaryFile The audio file to upload, defined as a BinaryFile instance. caption string The caption for the audio post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException audioFile is null. CreateAudio(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for an audio post. public static PostData CreateAudio(string url, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters url string The url to the audio file to post (the url must not be on Tumblr). caption string The caption for the audio post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException url is null. ArgumentException url is empty. CreateChat(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a chat post. public static PostData CreateChat(string conversation, string title = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters conversation string The chat conversation. title string The title of the chat. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException conversation is null. ArgumentException conversation is empty. CreateLink(string, string, string, string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a link post. public static PostData CreateLink(string url, string title = null, string description = null, string thumbnail = null, string excerpt = null, string author = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters url string The url for the link. title string The display text for the link. description string The link's description. thumbnail string The url of an image to use as a thumbnail for the post excerpt string An excerpt from the page the link points to, HTML entities should be escaped author string The name of the author from the page the link points to, HTML entities should be escaped tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException url is null. ArgumentException url is empty. CreatePhoto(BinaryFile) Creates the PostData for a photo post. public static PostData CreatePhoto(BinaryFile photo) Parameters photo BinaryFile A photo to upload, defined as a BinaryFile instance. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photo is null. CreatePhoto(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. public static PostData CreatePhoto(BinaryFile photo, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters photo BinaryFile A photo to upload, defined as a BinaryFile instance. caption string The optional string caption for this photo post. tags IEnumerable<string> The optional array of string used for tags. state PostCreationState The PostCreationState of this photo post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photo is null. CreatePhoto(IEnumerable<BinaryFile>, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post. public static PostData CreatePhoto(IEnumerable<BinaryFile> photos, string caption = null, string clickThroughUrl = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters photos IEnumerable<BinaryFile> A list of photos to upload, defined as BinaryFile instances. caption string The caption for the photo post. clickThroughUrl string The photo(s) click trough url. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException photos is null. ArgumentException photos is empty. CreatePhoto(string, string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a photo post with a source url for photo. public static PostData CreatePhoto(string sourceUrl, string caption = null, string clickThroughUrl = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters sourceUrl string The photo source URL caption string The user-supplied caption, HTML allowed clickThroughUrl string The \"click-through URL\" for the photo tags IEnumerable<string> list of tags for this post state PostCreationState The state of the post. Specify one of the following: published, draft, queue, private Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException the url for photo source must be set and not null ArgumentException the url for photo source must be set CreateQuote(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a quote post. public static PostData CreateQuote(string quote, string source, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters quote string The quote. source string The quote's source. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException quote is null. ArgumentException quote is empty. CreateText(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a text post. public static PostData CreateText(string body = null, string title = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters body string The body of the text post. title string The title of the text post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException body is null. ArgumentException body is empty. CreateVideo(BinaryFile, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. public static PostData CreateVideo(BinaryFile videoFile, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters videoFile BinaryFile The video file to upload, defined as a BinaryFile instance. caption string The caption for the video post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException videoFile is null. CreateVideo(string, string, IEnumerable<string>, PostCreationState) Creates the PostData for a video post. public static PostData CreateVideo(string embedCode, string caption = null, IEnumerable<string> tags = null, PostCreationState state = PostCreationState.Published) Parameters embedCode string The HTML embed code for the video. caption string The caption for the video post. tags IEnumerable<string> The tags to associate with the post. state PostCreationState The PostCreationState of the post. Returns PostData A PostData instance representing the post. Exceptions ArgumentNullException embedCode is null. ArgumentException embedCode is empty. ToMethodParameterSet() Converts the current instance to a MethodParameterSet/ public MethodParameterSet ToMethodParameterSet() Returns MethodParameterSet A MethodParameterSet."
  },
  "api/DontPanic.TumblrSharp.PostFilter.html": {
    "href": "api/DontPanic.TumblrSharp.PostFilter.html",
    "title": "Enum PostFilter | NewTumblrSharp",
    "summary": "Enum PostFilter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the filter for a post. public enum PostFilter Fields Html = 0 No filter. Raw = 2 As entered by the user (no post-processing); if the user writes in Markdown, the Markdown will be returned rather than html. Text = 1 Plain text, no html."
  },
  "api/DontPanic.TumblrSharp.PostFormat.html": {
    "href": "api/DontPanic.TumblrSharp.PostFormat.html",
    "title": "Enum PostFormat | NewTumblrSharp",
    "summary": "Enum PostFormat Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the post format. public enum PostFormat Fields Html = 0 Html. Markdown = 1 Markdown."
  },
  "api/DontPanic.TumblrSharp.PostType.html": {
    "href": "api/DontPanic.TumblrSharp.PostType.html",
    "title": "Enum PostType | NewTumblrSharp",
    "summary": "Enum PostType Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Defines the post filter. public enum PostType Fields All = 0 All posts. Answer = 4 Answer. Audio = 6 Audio. Chat = 8 Chat. Link = 3 Link. Photo = 7 Photo. Quote = 2 Quote. Text = 1 Text. Video = 5 Video."
  },
  "api/DontPanic.TumblrSharp.TumblrClientBase.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientBase.html",
    "title": "Class TumblrClientBase | NewTumblrSharp",
    "summary": "Class TumblrClientBase Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Encapsulates the Tumblr API. public class TumblrClientBase : IDisposable Inheritance object TumblrClientBase Implements IDisposable Derived TumblrClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TumblrClientBase(IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. public TumblrClientBase(IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .NetStandard 1.1+ TumblrClientBase(IHttpClientFactory, IHmacSha1HashProvider, string, string, Token) Initializes a new instance of the TumblrClientBase class. public TumblrClientBase(IHttpClientFactory httpClientFactory, IHmacSha1HashProvider hashProvider, string consumerKey, string consumerSecret, Token oAuthToken = null) Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient hashProvider IHmacSha1HashProvider A IHmacSha1HashProvider implementation used to generate a HMAC-SHA1 hash for OAuth purposes. consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Remarks You can get a consumer key and a consumer secret by registering an application with Tumblr: http://www.tumblr.com/oauth/apps platform: .NetStandard 2.0+, .Net Core 2.2+ Properties OAuthToken Gets the OAuth Token used when the object was created. public Token OAuthToken { get; } Property Value Token Methods CallApiMethodAsync<TResult>(ApiMethod, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API. public Task<TResult> CallApiMethodAsync<TResult>(ApiMethod method, CancellationToken cancellationToken, IEnumerable<JsonConverter> converters = null) where TResult : class Parameters method ApiMethod The ApiMethod to invoke. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. converters IEnumerable<JsonConverter> An optional list of JSON converters that will be used while deserializing the response from the Tumblr API. Returns Task<TResult> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a TResult instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Type Parameters TResult The type of the response received from the API. This must be a type that can be deserialized from the response JSON. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null. CallApiMethodAsync<TResponse, TResult>(ApiMethod, Func<TResponse, TResult>, CancellationToken, IEnumerable<JsonConverter>) Asynchronously invokes a method on the Tumblr API, and performs a projection on the response before returning the result. public Task<TResult> CallApiMethodAsync<TResponse, TResult>(ApiMethod method, Func<TResponse, TResult> projection, CancellationToken cancellationToken, IEnumerable<JsonConverter> converters = null) where TResponse : class where TResult : class Parameters method ApiMethod The ApiMethod to invoke. projection Func<TResponse, TResult> The projection function that transforms TResponse into TResult. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. converters IEnumerable<JsonConverter> An optional list of JSON converters that will be used while deserializing the response from the Tumblr API. Returns Task<TResult> A Task<TResult> that can be used to track the operation. If the task succeeds, the Result will carry a TResult instance. Otherwise Exception will carry a TumblrException representing the error occurred during the call. Type Parameters TResponse The type of the response received from the API. This must be a type that can be deserialized from the response JSON. TResult The actual type that is the result of the method. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null. projection is null. CallApiMethodNoResultAsync(ApiMethod, CancellationToken) Asynchronously invokes a method on the Tumblr API without expecting a response. public Task CallApiMethodNoResultAsync(ApiMethod method, CancellationToken cancellationToken) Parameters method ApiMethod The ApiMethod to invoke. cancellationToken CancellationToken A CancellationToken that can be used to cancel the operation. Returns Task A Task that can be used to track the operation. If the task fails, Exception will carry a TumblrException representing the error occurred during the call. Exceptions ObjectDisposedException The object has been disposed. ArgumentNullException method is null. Dispose() Disposes of the object and the internal HttpClient instance. public void Dispose() Dispose(bool) Subclasses can override this method to provide custom disposing logic. protected virtual void Dispose(bool disposing) Parameters disposing bool true if managed resources have to be disposed; otherwise false."
  },
  "api/DontPanic.TumblrSharp.TumblrClientFactory.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrClientFactory.html",
    "title": "Class TumblrClientFactory | NewTumblrSharp",
    "summary": "Class TumblrClientFactory Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.Client.dll Factory for TumblrClientBase instances. public class TumblrClientFactory : ITumblrClientFactory Inheritance object TumblrClientFactory Implements ITumblrClientFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<TClient>(IHttpClientFactory, string, string, Token) Creates a new Tumblr client instance of type TClient. public TClient Create<TClient>(IHttpClientFactory httpClientFactory, string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters httpClientFactory IHttpClientFactory HttpClientFactory to create internal HttpClient consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase). Remarks This factory only supports TumblrClientBase or TumblrClient as values for TClient. Exceptions ArgumentException TClient is not TumblrClientBase or TumblrClient. Create<TClient>(string, string, Token) Creates a new Tumblr client instance of type TClient. public TClient Create<TClient>(string consumerKey, string consumerSecret, Token oAuthToken = null) where TClient : TumblrClientBase Parameters consumerKey string The consumer key. consumerSecret string The consumer secret. oAuthToken Token An optional access token for the API. If no access token is provided, only the methods that do not require OAuth can be invoked successfully. Returns TClient A new Tumblr client instance of type TClient. Type Parameters TClient The type of client to create (must derive from TumblrClientBase). Remarks This factory only supports TumblrClientBase or TumblrClient as values for TClient. Exceptions ArgumentException TClient is not TumblrClientBase or TumblrClient."
  },
  "api/DontPanic.TumblrSharp.TumblrError.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrError.html",
    "title": "Class TumblrError | NewTumblrSharp",
    "summary": "Class TumblrError Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll TumblrError public class TumblrError Inheritance object TumblrError Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code codenumber of error [JsonProperty(PropertyName = \"code\")] public int Code { get; set; } Property Value int Detail details of error [JsonProperty(PropertyName = \"detail\")] public string Detail { get; set; } Property Value string Title title of error [JsonProperty(PropertyName = \"title\")] public string Title { get; set; } Property Value string Methods Equals(object) compare this object with another public override bool Equals(object obj) Parameters obj object Object to be equals Returns bool GetHashCode() returns a hash code public override int GetHashCode() Returns int"
  },
  "api/DontPanic.TumblrSharp.TumblrErrorsConverter.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrErrorsConverter.html",
    "title": "Class TumblrErrorsConverter | NewTumblrSharp",
    "summary": "Class TumblrErrorsConverter Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll convert TumblrError public class TumblrErrorsConverter : JsonConverter Inheritance object JsonConverter TumblrErrorsConverter Inherited Members JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/DontPanic.TumblrSharp.TumblrException.html": {
    "href": "api/DontPanic.TumblrSharp.TumblrException.html",
    "title": "Class TumblrException | NewTumblrSharp",
    "summary": "Class TumblrException Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents an error that occour during a Tumblr API call. public class TumblrException : Exception, ISerializable Inheritance object Exception TumblrException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TumblrException(HttpStatusCode, string, IEnumerable<TumblrError>, Exception) Initializes a new instance of the TumblrException class. public TumblrException(HttpStatusCode statusCode, string message = null, IEnumerable<TumblrError> errors = null, Exception innerException = null) Parameters statusCode HttpStatusCode The HttpStatusCode of the error. message string The error message. errors IEnumerable<TumblrError> An optional list of extra errors. innerException Exception An optional inner exception. Properties Errors Gets the extra error messages returned from the server (if any). public IReadOnlyCollection<TumblrError> Errors { get; } Property Value IReadOnlyCollection<TumblrError> StatusCode Gets the HttpStatusCode of the error. public HttpStatusCode StatusCode { get; } Property Value HttpStatusCode"
  },
  "api/DontPanic.TumblrSharp.UserMethod.html": {
    "href": "api/DontPanic.TumblrSharp.UserMethod.html",
    "title": "Class UserMethod | NewTumblrSharp",
    "summary": "Class UserMethod Namespace DontPanic.TumblrSharp Assembly DontPanic.TumblrSharp.dll Represents a user API method. public class UserMethod : ApiMethod Inheritance object ApiMethod UserMethod Inherited Members ApiMethod.Url ApiMethod.OAuthToken ApiMethod.HttpMethod ApiMethod.Parameters object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserMethod(string, Token, HttpMethod, MethodParameterSet) Initializes a new instance of the UserMethod class. public UserMethod(string methodName, Token oAuthToken, HttpMethod httpMethod, MethodParameterSet parameters = null) Parameters methodName string The name of the method to call. The method url will be automatically built. oAuthToken Token The OAuth Token to use for the call. Can be null if the method does not require OAuth. httpMethod HttpMethod The required HttpMethod for the Tumblr API call. Only Get and Post are supported. parameters MethodParameterSet The parameters for the Tumblr API call. Can be null if the method does not require parameters. Exceptions ArgumentNullException methodName is null. ArgumentException methodName is empty."
  },
  "api/DontPanic.TumblrSharp.html": {
    "href": "api/DontPanic.TumblrSharp.html",
    "title": "Namespace DontPanic.TumblrSharp | NewTumblrSharp",
    "summary": "Namespace DontPanic.TumblrSharp Classes ApiMethod Encapsulates all the data required to make a Tumblr API call. BinaryFile Represents a binary file (photo, video or audio). BlogMethod Represents a blog API method. DateTimeHelper Converts from Unix-type timestamp to DateTime and vice-versa. ExtensionHttpRequestMessage Extensionsclass for HttpRequestMessage HmacSha1HashProvider Provides an implementation of IHmacSha1HashProvider for signing OAuth requests. MethodParameterSet A sorted set of IMethodParameter instances. PostData Represents a post to be submitted to a Tumblr blog. TumblrClientBase Encapsulates the Tumblr API. TumblrClientFactory Factory for TumblrClientBase instances. TumblrError TumblrError TumblrErrorsConverter convert TumblrError TumblrException Represents an error that occour during a Tumblr API call. UserMethod Represents a user API method. Interfaces IHmacSha1HashProvider Provides HMAC-SHA1 hash for signing OAuth requests. IMethodParameter Represents a parameter for an ApiMethod. ITumblrClientFactory Generic factory for TumblrClientBase instances. Enums AvatarShape Options for what shape a user's avatar is intended to display as BlogType Defines the type of a blog. NoteType Defines the type of note on a post PostCreationState Defines the creation state of a post. PostFilter Defines the filter for a post. PostFormat Defines the post format. PostType Defines the post filter."
  },
  "articles/Authenticating.html": {
    "href": "articles/Authenticating.html",
    "title": "Authenticating | NewTumblrSharp",
    "summary": "Authenticating To use TumblrSharp properly, you'll need to authenticate with a user account. Tumblr does provide some unauthenticated API endpoints in their V1 API, but TumblrSharp doesn't cover those (and will most likely never). without OAuth Flow Often, apps that consume 3rd party APIs use OAuth. There are a few ways to setup TumblrSharp with OAuth, but the easiest is to use the Tumblr Console. Note - this method is only suitable for your own usage (e.g., if you are making a personal bot or anything specific to your own user account. Please look below if you're looking to make an app that anyone can use). Sign into your account, create an application, and then enter your Consumer key and Consumer Secret into the Tumblr Console. Tumblr will then show four sensitive keys - a consumer key, consumer secret, oauth_token and oauth_token_secret. Here is an example class - using DontPanic.TumblrSharp; using DontPanic.TumblrSharp.Client; public static class Tumblr { public static string Blog { get; set; } public static TumblrClient Client; const string CONSUMER_KEY = \"xxx\"; const string CONSUMER_SECRET = \"xxx\"; const string OAUTH_TOKEN = \"xxx\"; const string OAUTH_TOKEN_SECRET = \"xxx\"; static Tumblr() { // create our client Client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, new DontPanic.TumblrSharp.OAuth.Token(OAUTH_TOKEN, OAUTH_TOKEN_SECRET)); } } With that static class set up, you can call methods easily UserInfo userInfo = await Tumblr.Client.GetUserInfoAsync(); with OAuth Flow This section is for production applications. If you want individual user access, you'll need to use OAuth's regular flow. Before continuing, I recommend reading the OAuth Bible if you are not familiar with how OAuth works. (We're doing Three-Legged OAuth 1.0A). This section also is not going to show how to implement C#/WPF/Winforms specific functions, like capturing a custom URI protocol. (However, an examples repository will be up soon!) Overview Before we begin, let's take a minute to deconstruct the steps we'll need to accomplish in order to sign in a user. Create our Tumblr Application Request a Request Token Open a web browser and prompt a user for permission Capture a callback URI Request an Access Token Perform authenticated requests Although this may seem complex, it's not terribly difficult. The hardest part is capturing the callback URI, as it differs depending on if you are using Xamarin, WPF, UWP, etc. Creating the Tumblr Application You will first need to register a Tumblr application. This can be accomplished by signing into your account, clicking Settings > Apps > Register New Application. If you're already signed in, just click here. The form will ask for several necessary fields. You can fill out everything but the Default callback URL anyway you'd like. For the Default callback URL, you have a few choices. If you're using TumblrSharp with an ASP.NET web project, you'll want to set this to your website's URL. If you're creating anything that doesn't live on a web server, you're going to want to specify a custom URI A URI scheme is a simple way to associate certain calls to a specific application. For instance, https:// opens with a web browser, and ftp:// is used with FTP clients like Filezilla. URI schemes are fairly arbitrary. Music streaming company Spotify uses the URI spotify:// to communicate between the browser and their desktop application. For our own application, we can use a custom URI. This can be anything, but I recommend using your app's name. If my application were \"Noted\", my Default callback URL would be noted://. After you have chosen a callback URL, save the application. Getting a request token The first step in the OAuth flow is to get a request token. // create our OAuth client OAuthClient oauthClient = new OAuthClient( new DontPanic.TumblrSharp.HmacSha1HashProvider(), CONSUMER_KEY, CONSUMER_SECRET); // get a request token // replace \"noted://\" with your own callback URI Token requestToken = await oauthClient.GetRequestTokenAsync(\"noted://\"); Next, we need to ask the user for their permission. We can do this in a variety of ways, but preferably we want to open the default browser to a specific URL, which is a specific site route with the requestToken key appended. var authenticateUrl = \"https://www.tumblr.com/oauth/authorize?oauth_token=\" + requestToken.Key; // depending on your project, you might open up a web browser a different way System.Diagnostics.Process.Start(authenticateUrl); Once the webpage opens, the user will hopefully click \"Allow\", and your callback URL will be triggered. Capturing the callback URL This is the toughest part, since it requires a little research. There is a different way for every platform, so look up how to associate your application with a URI protocol. For instance, if you were using Xamarin with Android, you would flag your method like this: [IntentFilter(new[] { Intent.ActionView }, DataScheme = \"noted\", Categories = new[] { Intent.CategoryBrowsable, Intent.CategoryDefault })] We want a specific method to fire when the callback URI is called. Getting access tokens Once you've captured your callback, you're ready for the final step: requesting access tokens. Let's parse our verifier url. // this will be significantly different depending on what type of project you're making. You'll need to consult the documentation for the service in question. var verifierUrl = Intent.Data.EncodedQuery; Once we have the query, we can make a request for an Access Token, and then we can initialize our TumblrClient class! Token accessToken = await oauthClient.GetAccessTokenAsync(requestToken, verifierUrl); TumblrClient client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, accessToken); Using the TumblrClient Once we're done, we have access to all of our necessary API endpoints. UserInfo info = await client.GetUserInfoAsync(); Code Token requestToken; async void Authenticate() { // create a new instance of our OAuthClient we will use to authenticate OAuthClient oauthClient = new OAuthClient( new DontPanic.TumblrSharp.HmacSha1HashProvider(), CONSUMER_KEY, CONSUMER_SECRET); // Get our request token with the URI scheme \"noted://\" requestToken = await oauthClient.GetRequestTokenAsync(\"noted://\"); // open up the authenticateUrl in the user's default browser // var authenticateUrl = \"https://www.tumblr.com/oauth/authorize?oauth_token=\" + requestToken.Key; var authenticateUrl = oauthClient.GetAuthorizeUrl(requestToken).AbsoluteUri; System.Diagnostics.Process.Start(authenticateUrl); } // this method is called when the user allows access through the web browser // this will look different depending on what your platform uses to open URI schemes [SomeFlagThatTellsThisMethodWhatToOpen] async void OnAllow(string data) { // get our access token and instantiate a new TumblrClient Token accessToken = await oauthClient.GetAccessTokenAsync(requestToken, data); TumblrClient client = new TumblrClientFactory().Create<TumblrClient>(CONSUMER_KEY, CONSUMER_SECRET, accessToken); // call a method that requires authentication UserInfo info = await client.GetUserInfoAsync(); } Example for WinForms / Asp.Net WinForms Asp.Net"
  },
  "articles/firststeps.html": {
    "href": "articles/firststeps.html",
    "title": "First step | NewTumblrSharp",
    "summary": "First step Nuget TumblrSharp is currently on Nuget as NewTumblrSharp. If you want TumblrSharp just for your own use, and don't wish to develop it further, simply use Nuget. Package-Managment-Console Install-Package NewTumblrSharp Nuget-Manager Open the nuget-manager by right clicking on your project. In the searchbox type NewTumblrSharp and install. Source code If you'd like to use TumblrSharp via its source code to continue development, there are two methods. The following is for Visual Studio users, but the same steps can be used for Xamarin studio, etc. with little modification. Method 1: Adding Projects as References This method is preferred, as you can easily change the TumblrSharp source if needed without switching projects / reloading .dll files. Clone or download the repository Open the project in which you wish to use TumblrSharp Add project files to your solution. for portable: src/portable/TumblrSharp/TumblrSharp.csproj src/portable/TumblrSharp.Client/Tumblrsharp.Client.csproj for other: src/TumblrSharp/TumblrSharp.csproj src/TumblrSharp.Client/Tumblrsharp.Client.csproj Add references to all 2 newly added projects in your main project Method 2: Compiling and adding DLLs Clone or download the repository Build all included projects Add references to the .dll files in your project, the files found in the directory bin."
  },
  "articles/introduction.html": {
    "href": "articles/introduction.html",
    "title": "Introduction | NewTumblrSharp",
    "summary": "Introduction"
  },
  "articles/roadmap.html": {
    "href": "articles/roadmap.html",
    "title": "Roadmap | NewTumblrSharp",
    "summary": "Roadmap 1.2.0.x support .NetStandard 2.0 and .NetCore 2.2 support IHttpClientFactory 1.2.1.x support .NetStandard 2.1 and .NetCore 3.1 2.2.1.x support Tumblr NeuesPostFormt (npf)"
  },
  "index.html": {
    "href": "index.html",
    "title": "NewTumblrSharp | NewTumblrSharp",
    "summary": "NewTumblrSharp This is a continuation of the excellent TumblrSharp C# Library developed by the community. TumblrSharp is a very nicely designed library, and perhaps the only usable C# library that currently exists. However, development for the Codeplex project stopped in 2014. While using the library, I've noticed several bugs which I'll fix and post to this repository."
  }
}